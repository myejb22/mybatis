<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="test">
    <!-- 在 映射文件中配置很多sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询
    id：标识 映射文件中的 sql
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入 参数的类型，这里指定int型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
     -->
    <select id="findUserById" parameterType="int" resultType="com.mybatis.User">
        SELECT * FROM USER WHERE id=#{id}
    </select>

    <!--根据用户名来做模糊查询-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.mybatis.User">
        SELECT * FROM USER WHERE username LIKE '%${value}%'
    </select>

    <!--添加用户-->
    <insert id="insertUser" parameterType="com.mybatis.User">
        <!--<selectKey keyProperty="id" resultType="java.lang.String" order="BEFORE">
        <selectKey keyProperty="id" resultType="java.lang.Integer" order="AFTER">
            /*SELECT LAST_INSERT_ID()*/
            SELECT UUID()
        </selectKey>-->
        INSERT INTO USER (username,password,state,create_time) values(#{username},password(#{password}),#{state},#{createTime})
    </insert>

    <!--删除用户信息-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM USER WHERE id=#{id}
    </delete>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="com.mybatis.User">
        UPDATE USER SET username=#{username},password=password(#{password}),state=#{state},create_time=#{createTime}
        WHERE id=#{id}
    </update>
</mapper>